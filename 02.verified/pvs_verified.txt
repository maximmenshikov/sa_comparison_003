01.w_Defects/bit_shift.c:20
pvs (correct):
What? V610 Undefined behavior.
When? -
Where? File, line.
Who? -
Why? The right operand '32' is greater than or equal to the length in bits of the promoted left operand.
How to fix? Check the shift operator '<<'.

01.w_Defects/bit_shift.c:44
pvs (correct):
What? V610 Undefined behavior.
When? -
Where? File, line.
Who? -
Why? The right operand '32' is greater than or equal to the length in bits of the promoted left operand.
How to fix? Check the shift operator '<<'.

01.w_Defects/bit_shift.c:68
pvs (correct):
What? V610 Undefined behavior.
When? -
Where? File, line.
Who? -
Why? The right operand '-1' is negative.
How to fix? Check the shift operator '<<'.

01.w_Defects/bit_shift.c:80
pvs (correct):
What? V610 Undefined behavior.
When? -
Where? File, line.
Who? -
Why? The right operand '32' is greater than or equal to the length in bits of the promoted left operand.
How to fix? Check the shift operator '>>'.

01.w_Defects/bit_shift.c:92
pvs (correct):
What? V610 Undefined behavior.
When? -
Where? File, line.
Who? -
Why? The right operand '-1' is negative.
How to fix? Check the shift operator '>>'.

01.w_Defects/bit_shift.c:105
pvs (correct):
What? V610 Undefined behavior.
When? -
Where? File, line.
Who? -
Why? The right operand 'shift' is greater than or equal to the length in bits of the promoted left operand.
How to fix? Check the shift operator '>>'.

01.w_Defects/bit_shift.c:132
pvs (correct):
What? V610 Undefined behavior.
When? -
Where? File, line.
Who? -
Why? The right operand '((5 * shift) + 2)' is greater than or equal to the length in bits of the promoted left operand.
How to fix? Check the shift operator '<<'.

01.w_Defects/bit_shift.c:145
pvs (correct):
What? V610 Undefined behavior.
When? -
Where? File, line.
Who? -
Why? The right operand '((shift * shift) + 7)' is greater than or equal to the length in bits of the promoted left operand.
How to fix? Check the shift operator '<<'.

01.w_Defects/bit_shift.c:162
pvs (correct):
What? V610 Undefined behavior.
When? -
Where? File, line.
Who? -
Why? The right operand 'bit_shift_012_func_001()' is greater than or equal to the length in bits of the promoted left operand.
How to fix? Check the shift operator '<<'.

01.w_Defects/bit_shift.c:207
pvs (correct):
What? V610 Undefined behavior.
When? -
Where? File, line.
Who? -
Why? The right operand 'shift1' is greater than or equal to the length in bits of the promoted left operand.
How to fix? Check the shift operator '<<'.

01.w_Defects/bit_shift.c:224
pvs (correct):
What? V610 Undefined behavior.
When? -
Where? File, line.
Who? -
Why? The right operand 'shift2' is greater than or equal to the length in bits of the promoted left operand.
How to fix? Check the shift operator '<<'.

01.w_Defects/bit_shift.c:235
pvs (correct):
What? V610 Undefined behavior.
When? -
Where? File, line.
Who? -
Why? The right operand '32' is greater than or equal to the length in bits of the promoted left operand.
How to fix? Check the shift operator '<<'.

01.w_Defects/buffer_overrun_dynamic.c:332
pvs (correct):
What? V557 Array overrun is possible.
When? -
Where? File, line.
Who? -
Why? The 'index' index is pointing beyond array bound.
How to fix? -

01.w_Defects/buffer_overrun_dynamic.c:606
pvs (correct):
What? V557 Array overrun is possible.
When? -
Where? File, line.
Who? -
Why? The value of 'i' index could reach 10.
How to fix? -

01.w_Defects/buffer_underrun_dynamic.c:177
pvs (correct):
What? V557 Array underrun is possible.
When? -
Where? File, line.
Who? -
Why? The value of 'i - 3' index could reach -3.
How to fix? -

01.w_Defects/buffer_underrun_dynamic.c:531
pvs (correct):
What? V557 Array underrun is possible.
When? -
Where? File, line.
Who? -
Why? The '-1' index is pointing beyond array bound.
How to fix? -

01.w_Defects/buffer_underrun_dynamic.c:605
pvs (correct):
What? V557 Array underrun is possible.
When? -
Where? File, line.
Who? -
Why? The value of 'i' index could reach -1.
How to fix? -

01.w_Defects/buffer_underrun_dynamic.c:700
pvs (correct):
What? V557 Array underrun is possible.
When? -
Where? File, line.
Who? -
Why? The '-10' index is pointing beyond array bound.
How to fix? -

01.w_Defects/buffer_underrun_dynamic.c:720
pvs (correct):
What? V557 Array underrun is possible.
When? -
Where? File, line.
Who? -
Why? The value of 'i - 10' index could reach -10.
How to fix? -

01.w_Defects/buffer_underrun_dynamic.c:750
pvs (correct):
What? V557 Array underrun is possible.
When? -
Where? File, line.
Who? -
Why? The 'loc' index is pointing beyond array bound.
How to fix? -

01.w_Defects/cmp_funcadr.c:26
pvs (correct):
What? V516 Odd expression.
When? -
Where? File, line.
Who? -
Why? Non-null function pointer is compared to null: 'cmp_funcadr_001_func_001 == ((void *) 0)'.
How to fix? Consider inspecting an odd expression.

01.w_Defects/cmp_funcadr.c:48
pvs (correct):
What? V516 Odd expression.
When? -
Where? File, line.
Who? -
Why? Non-null function pointer is compared to null: 'cmp_funcadr_002_func_001 == ((void *) 0)'.
How to fix? Consider inspecting an odd expression.

01.w_Defects/not_return.c:22
pvs (correct):
What? V591 Non-void function should return a value.
When? -
Where? File, line.
Who? -
Why? -
How to fix? -

01.w_Defects/not_return.c:48
pvs (correct):
What? V591 Non-void function should return a value.
When? -
Where? File, line.
Who? -
Why? -
How to fix? -

01.w_Defects/not_return.c:97
pvs (correct):
What? V591 Non-void function should return a value.
When? -
Where? File, line.
Who? -
Why? -
How to fix? -

01.w_Defects/conflicting_cond.c:23
pvs (correct):
What? V547 Expression '(a == 0) && (a == 1)' is always false.
When? -
Where? File, line.
Who? -
Why? -
How to fix? Probably the '||' operator should be used here.

01.w_Defects/conflicting_cond.c:42
pvs (correct):
What? V547 Expression '(a < 5) && (10 < a)' is always false.
When? -
Where? File, line.
Who? -
Why? -
How to fix? -

01.w_Defects/conflicting_cond.c:61
pvs (correct):
What? V547 Expression is always false.
When? -
Where? File, line.
Who? -
Why? -
How to fix? -

01.w_Defects/conflicting_cond.c:102
pvs (correct):
What? V547 Expression '(a == 0) && (a == 1)' is always false.
When? -
Where? File, line.
Who? -
Why? -
How to fix? Probably the '||' operator should be used here.

01.w_Defects/conflicting_cond.c:117
pvs (correct):
What? V547 Expression '(a == 0) && (a == 1)' is always false.
When? -
Where? File, line.
Who? -
Why? -
How to fix? Probably the '||' operator should be used here.

01.w_Defects/conflicting_cond.c:136
pvs (correct):
What? V547 Expression '(a == 0) && (a == 1)' is always false.
When? -
Where? File, line.
Who? -
Why? -
How to fix? Probably the '||' operator should be used here.

01.w_Defects/conflicting_cond.c:156
pvs (correct):
What? V547 Expression '(a < 5) && (10 < a)' is always false.
When? -
Where? File, line.
Who? -
Why? -
How to fix? -

01.w_Defects/conflicting_cond.c:176
pvs (correct):
What? V547 Expression is always false.
When? -
Where? File, line.
Who? -
Why? -
How to fix? -

01.w_Defects/conflicting_cond.c:198
pvs (correct):
What? V547 Expression '(a == 0) && (a == 1)' is always false.
When? -
Where? File, line.
Who? -
Why? -
How to fix? Probably the '||' operator should be used here.

01.w_Defects/null_pointer.c:32
pvs (correct):
What? V522 Dereferencing of the null pointer 'p' might take place.
When? -
Where? File, line.
Who? -
Why? -
How to fix? -

01.w_Defects/null_pointer.c:131
pvs (correct):
What? V522 Dereferencing of the null pointer 'p' might take place.
When? -
Where? File, line.
Who? -
Why? -
How to fix? -

01.w_Defects/null_pointer.c:157
pvs (correct):
What? V522 Dereferencing of the null pointer 'p1' might take place.
When? -
Where? File, line.
Who? -
Why? -
How to fix? -

01.w_Defects/null_pointer.c:171
pvs (correct):
What? V522 Dereferencing of the null pointer 'p2' might take place.
When? -
Where? File, line.
Who? -
Why? -
How to fix? -

01.w_Defects/null_pointer.c:194
pvs (correct):
What? V522 Dereferencing of the null pointer 'p' might take place.
When? -
Where? File, line.
Who? -
Why? -
How to fix? -

01.w_Defects/null_pointer.c:211
pvs (correct):
What? V522 Dereferencing of the null pointer 'p' might take place.
When? -
Where? File, line.
Who? -
Why? -
How to fix? -

01.w_Defects/data_lost.c:20
pvs (correct):
What? V569 Transformation of constant value 128.
When? -
Where? File, line.
Who? -
Why? The value range of signed char type: [-128, 127].
How to fix? -

01.w_Defects/data_lost.c:92
pvs (correct):
What? V569 Truncation of constant value 256.
When? -
Where? File, line.
Who? -
Why? The value range of unsigned char type: [0, 255].
How to fix? -

01.w_Defects/overrun_st.c:20
pvs (correct):
What? V557 Array overrun is possible.
When? -
Where? File, line.
Who? -
Why? The '5' index is pointing beyond array bound.
How to fix? -

01.w_Defects/overrun_st.c:31
pvs (correct):
What? V557 Array overrun is possible.
When? -
Where? File, line.
Who? -
Why? The '5' index is pointing beyond array bound.
How to fix? -

01.w_Defects/overrun_st.c:43
pvs (correct):
What? V557 Array overrun is possible.
When? -
Where? File, line.
Who? -
Why? The '5' index is pointing beyond array bound.
How to fix? -

01.w_Defects/overrun_st.c:54
pvs (correct):
What? V557 Array overrun is possible.
When? -
Where? File, line.
Who? -
Why? The '5' index is pointing beyond array bound.
How to fix? -

01.w_Defects/overrun_st.c:65
pvs (correct):
What? V557 Array overrun is possible.
When? -
Where? File, line.
Who? -
Why? The '5' index is pointing beyond array bound.
How to fix? -

01.w_Defects/overrun_st.c:76
pvs (correct):
What? V557 Array overrun is possible.
When? -
Where? File, line.
Who? -
Why? The '5' index is pointing beyond array bound.
How to fix? -

01.w_Defects/overrun_st.c:87
pvs (correct):
What? V557 Array overrun is possible.
When? -
Where? File, line.
Who? -
Why? The '5' index is pointing beyond array bound.
How to fix? -

01.w_Defects/overrun_st.c:98
pvs (correct):
What? V557 Array overrun is possible.
When? -
Where? File, line.
Who? -
Why? The '5' index is pointing beyond array bound.
How to fix? -

01.w_Defects/overrun_st.c:109
pvs (correct):
What? V557 Array overrun is possible.
When? -
Where? File, line.
Who? -
Why? The '5' index is pointing beyond array bound.
How to fix? -

01.w_Defects/overrun_st.c:141
pvs (correct):
What? V557 Array overrun is possible.
When? -
Where? File, line.
Who? -
Why? The '5' index is pointing beyond array bound.
How to fix? -

01.w_Defects/overrun_st.c:157
pvs (correct):
What? V557 Array overrun is possible.
When? -
Where? File, line.
Who? -
Why? The '5' index is pointing beyond array bound.
How to fix? -

01.w_Defects/overrun_st.c:168
pvs (correct):
What? V557 Array overrun is possible.
When? -
Where? File, line.
Who? -
Why? The 'index' index is pointing beyond array bound.
How to fix? -

01.w_Defects/overrun_st.c:193
pvs (correct):
What? V557 Array overrun is possible.
When? -
Where? File, line.
Who? -
Why? The '(2 * index) + 1' index is pointing beyond array bound.
How to fix? -

01.w_Defects/overrun_st.c:205
pvs (correct):
What? V557 Array overrun is possible.
When? -
Where? File, line.
Who? -
Why? The '(index * index) + 1' index is pointing beyond array bound.
How to fix? -

01.w_Defects/overrun_st.c:221
pvs (correct):
What? V557 Array overrun is possible.
When? -
Where? File, line.
Who? -
Why? The 'overrun_st_017_func_001()' index is pointing beyond array bound.
How to fix? -

01.w_Defects/overrun_st.c:263
pvs (correct):
What? V557 Array overrun is possible.
When? -
Where? File, line.
Who? -
Why? The 'index1' index is pointing beyond array bound.
How to fix? -

01.w_Defects/overrun_st.c:279
pvs (correct):
What? V557 Array overrun is possible.
When? -
Where? File, line.
Who? -
Why? The 'index2' index is pointing beyond array bound.
How to fix? -

01.w_Defects/overrun_st.c:401
pvs (correct):
What? V557 Array overrun is possible.
When? -
Where? File, line.
Who? -
Why? The '5' index is pointing beyond array bound.
How to fix? -

01.w_Defects/overrun_st.c:414
pvs (correct):
What? V557 Array overrun is possible.
When? -
Where? File, line.
Who? -
Why? The '5' index is pointing beyond array bound.
How to fix? -

01.w_Defects/overrun_st.c:569
pvs (correct):
What? V557 Array overrun is possible.
When? -
Where? File, line.
Who? -
Why? The value of 'i' index could reach 5.
How to fix? -

01.w_Defects/overrun_st.c:587
pvs (correct):
What? V557 Array overrun is possible.
When? -
Where? File, line.
Who? -
Why? The value of 'i' index could reach 5.
How to fix? -

01.w_Defects/overrun_st.c:705
pvs (correct):
What? V557 Array overrun is possible.
When? -
Where? File, line.
Who? -
Why? The '5' index is pointing beyond array bound.
How to fix? -

01.w_Defects/overrun_st.c:723
pvs (correct):
What? V557 Array overrun is possible.
When? -
Where? File, line.
Who? -
Why? The '5' index is pointing beyond array bound.
How to fix? -

01.w_Defects/overrun_st.c:748
pvs (correct):
What? V557 Array overrun is possible.
When? -
Where? File, line.
Who? -
Why? The '5' index is pointing beyond array bound.
How to fix? -

01.w_Defects/overrun_st.c:772
pvs (correct):
What? V594 The 'p + 50' pointer steps out of array's bounds.
When? -
Where? File, line.
Who? -
Why? -
How to fix? -

01.w_Defects/data_overflow.c:23
pvs (correct):
What? V569 Transformation of constant value 128.
When? -
Where? File, line.
Who? -
Why? The value range of signed char type: [-128, 127].
How to fix? -

01.w_Defects/data_overflow.c:71
pvs (correct):
What? V569 Truncation of constant value 256.
When? -
Where? File, line.
Who? -
Why? The value range of unsigned char type: [0, 255].
How to fix? -

01.w_Defects/data_underflow.c:123
pvs (correct):
What? V569 Truncation of constant value -130.
When? -
Where? File, line.
Who? -
Why? The value range of signed char type: [-128, 127].
How to fix? -

01.w_Defects/double_free.c:22
pvs (correct):
What? V586 The 'free' function is called twice for deallocation of the same memory space.
When? -
Where? File, line.
Who? -
Why? -
How to fix? Check lines: 22, 24.

01.w_Defects/return_local.c:19
pvs (correct):
What? V558 Function returns the pointer to temporary local object: buf.
When? -
Where? File, line.
Who? -
Why? -
How to fix? -

01.w_Defects/endless_loop.c:72
pvs (correct):
What? V654 The condition 'flag' of loop is always true.
When? -
Where? File, line.
Who? -
Why? -
How to fix? -

01.w_Defects/endless_loop.c:131
pvs (correct):
What? V654 The condition 'flag > 0' of loop is always true.
When? -
Where? File, line.
Who? -
Why? -
How to fix? -

01.w_Defects/endless_loop.c:148
pvs (correct):
What? V654 The condition 'flag == 0' of loop is always true.
When? -
Where? File, line.
Who? -
Why? -
How to fix? -

01.w_Defects/free_nondynamic_allocated_memory.c:22
pvs (correct):
What? V611 The 'free' function should not receive address of a static array as an argument.
When? -
Where? File, line.
Who? -
Why? -
How to fix? Consider inspecting operation logics behind the 'ptr' variable.

01.w_Defects/free_nondynamic_allocated_memory.c:36
pvs (correct):
What? V611 The 'free' function should not receive address of a static array as an argument.
When? -
Where? File, line.
Who? -
Why? -
How to fix? Consider inspecting operation logics behind the 'ptr' variable.

01.w_Defects/free_nondynamic_allocated_memory.c:48
pvs (correct):
What? V611 The 'free' function should not receive address of a static array as an argument.
When? -
Where? File, line.
Who? -
Why? -
How to fix? Consider inspecting operation logics behind the 'free_nondynamic_allocated_memory_003_gbl_ptr' variable.

01.w_Defects/free_nondynamic_allocated_memory.c:62
pvs (correct):
What? V611 The 'free' function should not receive address of a local variable as an argument.
When? -
Where? File, line.
Who? -
Why? -
How to fix? Consider inspecting operation logics behind the 'ptr' variable.

01.w_Defects/free_nondynamic_allocated_memory.c:86
pvs (correct):
What? V726 An attempt to free memory containing the 'pbuf' array by using the 'free' function.
When? -
Where? File, line.
Who? -
Why? This is incorrect as 'pbuf' was created on stack.
How to fix? -

01.w_Defects/free_nondynamic_allocated_memory.c:103
pvs (correct):
What? V611 The 'free' function should not receive address of a local variable as an argument.
When? -
Where? File, line.
Who? -
Why? -
How to fix? Consider inspecting operation logics behind the 'ptr4' variable.

01.w_Defects/free_nondynamic_allocated_memory.c:115
pvs (correct):
What? V611 The 'free' function should not receive address of a static array as an argument.
When? -
Where? File, line.
Who? -
Why? -
How to fix? Consider inspecting operation logics behind the 'ptr' variable.

01.w_Defects/free_nondynamic_allocated_memory.c:128
pvs (correct):
What? V611 The 'free' function should not receive address of a static array as an argument.
When? -
Where? File, line.
Who? -
Why? -
How to fix? Consider inspecting operation logics behind the 'ptr' variable.

01.w_Defects/free_nondynamic_allocated_memory.c:141
pvs (correct):
What? V611 The 'free' function should not receive address of a static array as an argument.
When? -
Where? File, line.
Who? -
Why? -
How to fix? Consider inspecting operation logics behind the 'ptr' variable.

01.w_Defects/free_nondynamic_allocated_memory.c:155
pvs (correct):
What? V611 The 'free' function should not receive address of a static array as an argument.
When? -
Where? File, line.
Who? -
Why? -
How to fix? Consider inspecting operation logics behind the 'ptr' variable.

01.w_Defects/free_nondynamic_allocated_memory.c:170
pvs (correct):
What? V611 The 'free' function should not receive address of a static array as an argument.
When? -
Where? File, line.
Who? -
Why? -
How to fix? Consider inspecting operation logics behind the 'ptr' variable.

01.w_Defects/free_nondynamic_allocated_memory.c:187
pvs (correct):
What? V611 The 'free' function should not receive address of a static array as an argument.
When? -
Where? File, line.
Who? -
Why? -
How to fix? Consider inspecting operation logics behind the 'ptr' variable.

01.w_Defects/free_nondynamic_allocated_memory.c:209
pvs (correct):
What? V611 The 'free' function should not receive address of a local variable as an argument.
When? -
Where? File, line.
Who? -
Why? -
How to fix? Consider inspecting operation logics behind the 'new_struct->next' variable.

01.w_Defects/free_nondynamic_allocated_memory.c:229
pvs (correct):
What? V611 The 'free' function should not receive address of a local variable as an argument.
When? -
Where? File, line.
Who? -
Why? -
How to fix? Consider inspecting operation logics behind the 'free_nondynamic_allocated_memory_str' variable.

01.w_Defects/free_null_pointer.c:23
pvs (correct):
What? V575 The null pointer is passed into 'free' function.
When? -
Where? File, line.
Who? -
Why? -
How to fix? Inspect the first argument.

01.w_Defects/function_return_value_unchecked.c:69
pvs (correct):
What? V530 The return value of function 'function_return_value_unchecked_002_func_001' is required to be utilized.
When? -
Where? File, line.
Who? -
Why? -
How to fix? -

01.w_Defects/underrun_st.c:21
pvs (correct):
What? V557 Array underrun is possible.
When? -
Where? File, line.
Who? -
Why? The '-1' index is pointing beyond array bound.
How to fix? -

01.w_Defects/underrun_st.c:31
pvs (correct):
What? V557 Array underrun is possible.
When? -
Where? File, line.
Who? -
Why? The '-1' index is pointing beyond array bound.
How to fix? -

01.w_Defects/underrun_st.c:42
pvs (correct):
What? V557 Array underrun is possible.
When? -
Where? File, line.
Who? -
Why? The 'index' index is pointing beyond array bound.
How to fix? -

01.w_Defects/improper_termination_of_block.c:67
pvs (correct):
What? V654 The condition 'x < 10' of loop is always true.
When? -
Where? File, line.
Who? -
Why? -
How to fix? -

01.w_Defects/improper_termination_of_block.c:67
pvs (correct):
What? V712 Be advised that compiler may delete this cycle or make it infinity.
When? -
Where? File, line.
Who? -
Why? -
How to fix? Use volatile variable(s) or synchronization primitives to avoid this.

01.w_Defects/uninit_memory_access.c:53
pvs (correct):
What? V614 Uninitialized pointer 'str2' used.
When? -
Where? File, line.
Who? -
Why? -
How to fix? Consider checking the second actual argument of the 'strcpy' function.

01.w_Defects/uninit_memory_access.c:126
pvs (correct):
What? V614 Uninitialized pointer 'str2' used.
When? -
Where? File, line.
Who? -
Why? -
How to fix? Consider checking the second actual argument of the 'uninit_memory_access_006_func_001' function.

01.w_Defects/uninit_memory_access.c:199
pvs (correct):
What? V522 There might be dereferencing of a potential null pointer 's'.
When? -
Where? File, line.
Who? -
Why? -
How to fix? -

01.w_Defects/uninit_memory_access.c:318
pvs (correct):
What? V614 Uninitialized pointer 'str' used.
When? -
Where? File, line.
Who? -
Why? -
How to fix? Consider checking the first actual argument of the 'uninit_memory_access_011_func_001' function.

01.w_Defects/uninit_memory_access.c:434
pvs (correct):
What? V575 The potential null pointer is passed into 'memcpy' function.
When? -
Where? File, line.
Who? -
Why? -
How to fix? Inspect the first argument.

01.w_Defects/uninit_pointer.c:29
pvs (correct):
What? V614 Uninitialized pointer 'p' used.
When? -
Where? File, line.
Who? -
Why? -
How to fix? -

01.w_Defects/uninit_pointer.c:40
pvs (correct):
What? V614 Uninitialized pointer 'p' used.
When? -
Where? File, line.
Who? -
Why? -
How to fix? -

01.w_Defects/uninit_pointer.c:70
pvs (correct):
What? V614 Uninitialized pointer 'p' used.
When? -
Where? File, line.
Who? -
Why? -
How to fix? Consider checking the first actual argument of the 'uninit_pointer_004_func_001' function.

01.w_Defects/uninit_pointer.c:151
pvs (correct):
What? V614 Uninitialized variable 'ret' used.
When? -
Where? File, line.
Who? -
Why? -
How to fix? -

01.w_Defects/uninit_pointer.c:367
pvs (correct):
What? V614 Uninitialized pointer 'ptr' used.
When? -
Where? File, line.
Who? -
Why? -
How to fix? Consider checking the first actual argument of the 'uninit_pointer_015_func_001' function.

01.w_Defects/uninit_pointer.c:415
pvs (correct):
What? V575 The potential null pointer is passed into 'strcpy' function.
When? -
Where? File, line.
Who? -
Why? -
How to fix? Inspect the first argument.

01.w_Defects/uninit_var.c:22
pvs (correct):
What? V614 Uninitialized variable 'a' used.
When? -
Where? File, line.
Who? -
Why? -
How to fix? -

01.w_Defects/uninit_var.c:62
pvs (correct):
What? V614 Uninitialized variable 'dvar' used.
When? -
Where? File, line.
Who? -
Why? -
How to fix? -

01.w_Defects/uninit_var.c:74
pvs (correct):
What? V614 Uninitialized variable 'ret' used.
When? -
Where? File, line.
Who? -
Why? -
How to fix? -

01.w_Defects/zero_division.c:21
pvs (correct):
What? V609 Divide by zero.
When? -
Where? File, line.
Who? -
Why? Denominator '0' == 0.
How to fix? -

01.w_Defects/zero_division.c:32
pvs (correct):
What? V609 Divide by zero.
When? -
Where? File, line.
Who? -
Why? Denominator '0' == 0.
How to fix? -

01.w_Defects/zero_division.c:45
pvs (correct):
What? V609 Mod by zero.
When? -
Where? File, line.
Who? -
Why? Denominator '0' == 0.
How to fix? -

01.w_Defects/zero_division.c:139
pvs (correct):
What? V609 Divide by zero.
When? -
Where? File, line.
Who? -
Why? Denominator 'divisor' == 0.
How to fix? -

01.w_Defects/zero_division.c:164
pvs (correct):
What? V609 Divide by zero.
When? -
Where? File, line.
Who? -
Why? Denominator '2 * divisor - 4' == 0.
How to fix? -

01.w_Defects/zero_division.c:176
pvs (correct):
What? V609 Divide by zero.
When? -
Where? File, line.
Who? -
Why? Denominator 'divisor * divisor - 4' == 0.
How to fix? -

01.w_Defects/zero_division.c:193
pvs (correct):
What? V609 Divide by zero.
When? -
Where? File, line.
Who? -
Why? Denominator 'zero_division_013_func_001()' == 0.
How to fix? -

01.w_Defects/zero_division.c:223
pvs (correct):
What? V609 Divide by zero.
When? -
Where? File, line.
Who? -
Why? Denominator 'divisor1' == 0.
How to fix? -

02.wo_Defects/memory_allocation_failure.c:548
pvs (false):
What? V641 The size of the allocated memory buffer is not a multiple of the element size.
When? -
Where? File, line.
Who? -
Why? -
How to fix? -

02.wo_Defects/endless_loop.c:81
pvs (false):
What? V654 The condition 'flag' of loop is always true.
When? -
Where? File, line.
Who? -
Why? -
How to fix? -

02.wo_Defects/endless_loop.c:152
pvs (false):
What? V654 The condition 'flag > 0' of loop is always true.
When? -
Where? File, line.
Who? -
Why? -
How to fix? -

02.wo_Defects/endless_loop.c:173
pvs (false):
What? V654 The condition 'flag == 0' of loop is always true.
When? -
Where? File, line.
Who? -
Why? -
How to fix? -

02.wo_Defects/free_nondynamically_allocated_memory.c:61
pvs (false):
What? V611 The 'free' function should not receive address of a local variable as an argument.
When? -
Where? File, line.
Who? -
Why? -
How to fix? Consider inspecting operation logics behind the 'ptr' variable.

02.wo_Defects/free_nondynamically_allocated_memory.c:114
pvs (false):
What? V611 The 'free' function should not receive address of a static array as an argument.
When? -
Where? File, line.
Who? -
Why? -
How to fix? Consider inspecting operation logics behind the 'ptr' variable.

02.wo_Defects/free_nondynamically_allocated_memory.c:127
pvs (false):
What? V611 The 'free' function should not receive address of a static array as an argument.
When? -
Where? File, line.
Who? -
Why? -
How to fix? Consider inspecting operation logics behind the 'ptr' variable.

02.wo_Defects/free_nondynamically_allocated_memory.c:140
pvs (false):
What? V611 The 'free' function should not receive address of a static array as an argument.
When? -
Where? File, line.
Who? -
Why? -
How to fix? Consider inspecting operation logics behind the 'ptr' variable.

02.wo_Defects/free_nondynamically_allocated_memory.c:170
pvs (false):
What? V611 The 'free' function should not receive address of a static array as an argument.
When? -
Where? File, line.
Who? -
Why? -
How to fix? Consider inspecting operation logics behind the 'ptr' variable.

02.wo_Defects/free_nondynamically_allocated_memory.c:187
pvs (false):
What? V611 The 'free' function should not receive address of a static array as an argument.
When? -
Where? File, line.
Who? -
Why? -
How to fix? Consider inspecting operation logics behind the 'ptr' variable.

02.wo_Defects/uninit_memory_access.c:455
pvs (false):
What? V575 The potential null pointer is passed into 'memcpy' function.
When? -
Where? File, line.
Who? -
Why? -
How to fix? Inspect the first argument.

02.wo_Defects/uninit_pointer.c:432
pvs (false):
What? V575 The potential null pointer is passed into 'strcpy' function.
When? -
Where? File, line.
Who? -
Why? -
How to fix? Inspect the first argument.

